{"version":3,"sources":["images/homepage/baking.jpg","images/homepage/cooking.jpg","images/homepage/pole.png","components/CardComponent.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardComponent","Card","style","height","width","Img","variant","src","this","props","img","Body","Title","title","Text","description","Button","React","Component","Home","className","onClick","alert","baking","cooking","pole","Baking","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4EAAAA,EAAOC,QAAU,IAA0B,oC,wCCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mOCqB5BC,E,uKAfP,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,OAAQ,QAASC,MAAO,UAClC,kBAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMC,IAAKC,KAAKC,MAAMC,MACxC,kBAACT,EAAA,EAAKU,KAAN,KACI,kBAACV,EAAA,EAAKW,MAAN,KAAaJ,KAAKC,MAAMI,OACxB,kBAACZ,EAAA,EAAKa,KAAN,KACKN,KAAKC,MAAMM,aAEpB,kBAACC,EAAA,EAAD,CAAQV,QAAQ,WAAhB,c,GAVYW,IAAMC,W,kCCuCnBC,MAnCf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,YACb,yBAAKC,QAAS,kBAAMC,MAAM,WACxB,kBAAC,EAAD,CACET,MAAM,SACNH,IAAKa,IACLR,YAAY,uDACZM,QAAS,kBAAMC,MAAM,0BAI3B,yBAAKF,UAAU,YACf,kBAAC,EAAD,CACIP,MAAM,UACNH,IAAKc,IACLT,YAAY,0DAGhB,yBAAKK,UAAU,YACf,kBAAC,EAAD,CACIP,MAAM,eACNH,IAAKe,IACLV,YAAY,kCC5BpBW,EAAS,kBACb,6BACE,6CAgBWC,E,uKATX,OACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,UAAUC,UAAWJ,S,GAN7BR,aCAEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5adc692.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/baking.45bdea72.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cooking.83512bcd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pole.a90235e5.png\";","import React from 'react';\nimport {Card, Button} from 'react-bootstrap';\nimport baking from '../images/homepage/baking.jpg'\n\nclass CardComponent extends React.Component {\n    render() {\n        return (\n            <Card style={{height: '30rem', width: '18rem' }}>\n                <Card.Img variant=\"top\" src={this.props.img} />\n                <Card.Body>\n                    <Card.Title>{this.props.title}</Card.Title>\n                    <Card.Text>\n                        {this.props.description}\n                    </Card.Text>\n                <Button variant=\"primary\">View</Button>\n                </Card.Body>\n            </Card>\n        )\n}\n}\n\nexport default CardComponent;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../App.css';\nimport CardComponent from '../components/CardComponent.js'\nimport cooking from '../images/homepage/cooking.jpg'\nimport pole from '../images/homepage/pole.png'\nimport baking from '../images/homepage/baking.jpg'\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row m-4\">\n          <div className=\"col-lg-4\">\n            <div onClick={() => alert(\"click\")}>\n              <CardComponent \n                title=\"Baking\" \n                img={baking} \n                description=\"Collection of things I have baked, includign recipes\"\n                onClick={() => alert(\"card click worked\")}\n              />\n            </div>\n          </div>\n          <div className=\"col-lg-4\">\n          <CardComponent \n              title=\"Cooking\" \n              img={cooking} \n              description=\"Collection of meals I have cooked, includign recipes\"\n            />\n          </div>\n          <div className=\"col-lg-4\">\n          <CardComponent \n              title=\"Pole Dancing\" \n              img={pole} \n              description=\"Progress in pole dancing\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Route, Link} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Home from './pages/Home.js'\n\nconst Baking = () => (\n  <div>\n    <p> Hello world</p>\n  </div>\n)\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/baking' component={Baking} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router, Route, Link} from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}